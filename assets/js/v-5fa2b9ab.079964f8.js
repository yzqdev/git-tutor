"use strict";(self.webpackChunkgit_tutor=self.webpackChunkgit_tutor||[]).push([[3417],{7447:(s,e,a)=>{a.r(e),a.d(e,{data:()=>n});const n=JSON.parse('{"key":"v-5fa2b9ab","path":"/git/git-features.html","title":"git教程","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"相关操作","slug":"相关操作","link":"#相关操作","children":[]}],"git":{"createdTime":1661668844000,"updatedTime":1665208243000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":2}]},"readingTime":{"minutes":1.05,"words":315},"filePathRelative":"git/git-features.md","localizedDate":"2022年8月28日","excerpt":""}')},8025:(s,e,a)=>{a.r(e),a.d(e,{default:()=>l});var n=a(6808);const i=[(0,n.uE)('<h1 id="git教程" tabindex="-1"><a class="header-anchor" href="#git教程" aria-hidden="true">#</a> git教程</h1><p><strong>git submodule如何使用?</strong></p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>在clone的时候\ngit clone <span class="token operator">--</span>recursive https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/halo-dev/halo\n\n<span class="token operator">/</span><span class="token operator">/</span>第一步，初始化\ngit init \n\n<span class="token operator">/</span><span class="token operator">/</span>第二步，拉取，后面推荐使用ssh地址\ngit submodule add （<span class="token operator">+</span>地址）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>\n第三步拉取所有的\ngit submodule update <span class="token operator">--</span>init <span class="token operator">--</span>recursive    下拉子模块\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关操作" tabindex="-1"><a class="header-anchor" href="#相关操作" aria-hidden="true">#</a> 相关操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 更新子模块</span>\n<span class="token function">git</span> submodule update\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果实在是不小心上传了.idea文件</strong><strong>1.在你的项目本地仓库(也就是你代码拉取下来的位置)右击选择git bash here</strong><strong>2.然后按照顺序输入命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> .idea\n<span class="token function">git</span> commit -m<span class="token string">&quot;提交信息&quot;</span>\n　　<span class="token function">git</span> push\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这样你就可以将你上传的库上的.idea文件删除了（不光.idea可以这么删除，其他文件也可以这样删除）</strong><strong>​</strong></p><p><strong>git常用的术语</strong></p><ul><li>type: commit 的类型</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li><li>scope: commit 影响的范围, 比如: route, component, utils, build...</li><li>subject: commit 的概述</li><li>body: commit 具体修改内容, 可以分为多行</li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li></ul>',10)],t={},l=(0,a(8580).Z)(t,[["render",function(s,e){return(0,n.wg)(),(0,n.iD)("div",null,i)}]])},8580:(s,e)=>{e.Z=(s,e)=>{const a=s.__vccOpts||s;for(const[s,n]of e)a[s]=n;return a}}}]);