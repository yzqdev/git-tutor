"use strict";(self.webpackChunkgit_tutor=self.webpackChunkgit_tutor||[]).push([[6524],{9884:(e,s,a)=>{a.r(s),a.d(s,{data:()=>n});const n=JSON.parse('{"key":"v-018d81e0","path":"/git/git-tips.html","title":"git-tips","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"清空所有commit","slug":"清空所有commit","link":"#清空所有commit","children":[{"level":3,"title":"一些小技巧","slug":"一些小技巧","link":"#一些小技巧","children":[]},{"level":3,"title":"删除所有commit","slug":"删除所有commit","link":"#删除所有commit","children":[]}]},{"level":2,"title":"git push force如何pull","slug":"git-push-force如何pull","link":"#git-push-force如何pull","children":[]},{"level":2,"title":"设置自动跟踪remote","slug":"设置自动跟踪remote","link":"#设置自动跟踪remote","children":[]},{"level":2,"title":"如何使用git命令回滚到指定版本以及返回到新版本","slug":"如何使用git命令回滚到指定版本以及返回到新版本","link":"#如何使用git命令回滚到指定版本以及返回到新版本","children":[{"level":3,"title":"1.回滚到指定版本","slug":"_1-回滚到指定版本","link":"#_1-回滚到指定版本","children":[]},{"level":3,"title":"2.返回到最新版本","slug":"_2-返回到最新版本","link":"#_2-返回到最新版本","children":[]}]},{"level":2,"title":"amend操作","slug":"amend操作","link":"#amend操作","children":[{"level":3,"title":"如果只是添加了一些文件,不想改commit","slug":"如果只是添加了一些文件-不想改commit","link":"#如果只是添加了一些文件-不想改commit","children":[]}]},{"level":2,"title":"给文件夹添加git remote","slug":"给文件夹添加git-remote","link":"#给文件夹添加git-remote","children":[]},{"level":2,"title":"常用操作","slug":"常用操作","link":"#常用操作","children":[]},{"level":2,"title":"git add和git stash的区别","slug":"git-add和git-stash的区别","link":"#git-add和git-stash的区别","children":[]},{"level":2,"title":"关于git restore","slug":"关于git-restore","link":"#关于git-restore","children":[]}],"git":{"createdTime":1661668844000,"updatedTime":1668828273000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":7}]},"readingTime":{"minutes":4.82,"words":1446},"filePathRelative":"git/git-tips.md","localizedDate":"2022年8月28日","excerpt":""}')},664:(e,s,a)=>{a.r(s),a.d(s,{default:()=>l});var n=a(6808);const i=[(0,n.uE)('<h1 id="git-tips" tabindex="-1"><a class="header-anchor" href="#git-tips" aria-hidden="true">#</a> git-tips</h1><h2 id="清空所有commit" tabindex="-1"><a class="header-anchor" href="#清空所有commit" aria-hidden="true">#</a> 清空所有commit</h2><h3 id="一些小技巧" tabindex="-1"><a class="header-anchor" href="#一些小技巧" aria-hidden="true">#</a> 一些小技巧</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 获取当前origin对应的url </span>\n<span class="token function">git</span> ls-remote --get-url origin\n<span class="token comment"># git获取当前分支名字</span>\n<span class="token function">git</span> rev-parse --abbrev-ref HEAD\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除所有commit" tabindex="-1"><a class="header-anchor" href="#删除所有commit" aria-hidden="true">#</a> 删除所有commit</h3><h4 id="直接删除-git文件夹" tabindex="-1"><a class="header-anchor" href="#直接删除-git文件夹" aria-hidden="true">#</a> 直接删除.git文件夹</h4><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token keyword">function</span> clearAllCommits <span class="token punctuation">{</span>\n    <span class="token variable">$remote</span> = git <span class="token function">ls</span><span class="token operator">-</span>remote <span class="token operator">--</span><span class="token function">get-url</span> origin\n    <span class="token function">Write-Host</span> <span class="token operator">-</span>ForegroundColor Cyan <span class="token string">&quot;获取git remote地址=&gt;<span class="token variable">$remote</span>&quot;</span>\n     \n    <span class="token function">Write-Host</span> <span class="token operator">-</span>ForegroundColor Red <span class="token string">&quot;删除.git文件夹&quot;</span>\n    <span class="token function">Remove-Item</span> <span class="token operator">-</span>Recurse <span class="token operator">-</span>Force <span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span>git \n    <span class="token function">Write-Host</span> <span class="token operator">-</span>ForegroundColor Green <span class="token string">&quot;删除完毕,git操作&quot;</span>\n    git init\n    git remote add origin <span class="token string">&quot;<span class="token variable">$remote</span>&quot;</span> \n    git add <span class="token operator">-</span>A\n    git commit <span class="token operator">-</span>m <span class="token string">&quot;init&quot;</span> \n    git push origin main <span class="token operator">-</span>f\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用git-reset-soft-first-commit-id" tabindex="-1"><a class="header-anchor" href="#使用git-reset-soft-first-commit-id" aria-hidden="true">#</a> 使用<code>git reset --soft &lt;first commit id&gt;</code></h4><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>\n    <span class="token variable">$firstCommitId</span>= git rev-list <span class="token operator">--</span>max-parents=0 HEAD\n       <span class="token function">Write-Host</span> <span class="token operator">-</span>ForegroundColor Green <span class="token string">&quot;第一次commit的id=&gt;<span class="token variable">$firstCommitId</span>&quot;</span>\n    git reset <span class="token operator">--</span>soft <span class="token variable">$firstCommitId</span>\n    git add <span class="token operator">-</span>A\n    git commit <span class="token operator">-</span>m <span class="token string">&quot;add files&quot;</span> \n    git push origin main <span class="token operator">-</span>f\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">git</span> checkout <span class="token parameter variable">--orphan</span> dev <span class="token punctuation">;</span>\n    <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span> <span class="token punctuation">;</span>\n    <span class="token function">git</span> branch <span class="token parameter variable">-D</span> main <span class="token punctuation">;</span>\n    <span class="token function">git</span> branch <span class="token parameter variable">-m</span> main <span class="token punctuation">;</span>\n    <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;Initial commit&#39;</span> <span class="token punctuation">;</span>\n    <span class="token function">git</span> push origin main <span class="token parameter variable">-f</span> <span class="token punctuation">;</span>\n    <span class="token function">git</span> gc <span class="token parameter variable">--aggressive</span> <span class="token parameter variable">--prune</span><span class="token operator">=</span>all\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>git checkout --orphan tmp</code>不会删除文件 <code>git switch --orphan tmp</code>会删除所有跟踪的的文件,所有不能用来清空commit <code>git rev-list --max-parents=0 HEAD</code>可以获取第一个commit的id 然后<code>git reset --soft &lt;commitid&gt;</code>就行了</p></div><h2 id="git-push-force如何pull" tabindex="-1"><a class="header-anchor" href="#git-push-force如何pull" aria-hidden="true">#</a> git push force如何pull</h2><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>git fetch origin\ngit checkout <span class="token operator">-</span>b tmp\ngit branch <span class="token operator">-</span>D main\ngit checkout <span class="token operator">-</span>b main origin/main\ngit branch <span class="token operator">-</span>D tmp\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置自动跟踪remote" tabindex="-1"><a class="header-anchor" href="#设置自动跟踪remote" aria-hidden="true">#</a> 设置自动跟踪remote</h2><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>\ngit config <span class="token operator">--</span>global <span class="token operator">--</span>add <span class="token operator">--</span>bool push<span class="token punctuation">.</span>autoSetupRemote true\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何使用git命令回滚到指定版本以及返回到新版本" tabindex="-1"><a class="header-anchor" href="#如何使用git命令回滚到指定版本以及返回到新版本" aria-hidden="true">#</a> 如何使用git命令回滚到指定版本以及返回到新版本</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>1.git branch:查看当前分支，如果在后面加-a则表示查看所有分支。</p><p>2.git log:查看提交历史，在commit id这一项中可以看到提交的历史版本id。</p><p>3.git reflog:查看每一次命令的记录</p><p>4.git reset --soft:回退到某个版本，只回退了commit的信息。</p><p>5.git reset --mixed:为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息。</p><p>6.git reset --hard:彻底回退到某个版本，本地的源码也会变为上一个版本的内容，撤销的commit中所包含的更改被冲掉,未提交的文件也会消失。</p></div><h3 id="_1-回滚到指定版本" tabindex="-1"><a class="header-anchor" href="#_1-回滚到指定版本" aria-hidden="true">#</a> 1.回滚到指定版本</h3><p>首先进入项目根目录下，使用git log 命令，找到需要返回的commit id 号，使用<code>git reset --hard</code> 后跟你需要的commit id号，这样你就回到了指定的版本，注意<code>git reset --hard</code>与<code>git reset --soft</code>的区别：</p><p><code>git reset –-soft</code>：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。通常使用在当你git commit -m &quot;注释&quot;提交了你修改的内容，但内容有点问题想撤销，又还要提交，就使用soft，相当于软着路；</p><p>git reset -–hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容，撤销的commit中所包含的更改被冲掉，相当于硬着路，回滚最彻底。</p><h3 id="_2-返回到最新版本" tabindex="-1"><a class="header-anchor" href="#_2-返回到最新版本" aria-hidden="true">#</a> 2.返回到最新版本</h3><p>当你发现需要回滚到最新版本时，可以采用以下指今步骤</p><p><code>git log</code>：查看历史提交</p><p><code>git reflog</code>：查看每一次命令记录 通过git reflog命令查看到之后，我们再利用 git reset 来返回到相应的版本即可，HEAD前面的一串字符为我们简写的ID，所以最后输入</p><p><code>git reset --hard ca936c3</code>即回滚到了最新的版本号了</p><h2 id="amend操作" tabindex="-1"><a class="header-anchor" href="#amend操作" aria-hidden="true">#</a> amend操作</h2><p>:::warn 但是不能是已经 push 的提交 ::: 修改文件后</p><p>git add file</p><p>用法</p><p>git commit --amend</p><p>合并缓存的修改和上一次的提交，用新的快照替换上一个提交。缓存区没有文件时运行这个命令可以用来编辑上次提交的提交信息，而不会更改快照。</p><p>修改提交信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token string">&#39;amend message&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>//修改提交信息操作 force</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push --force-with-lease origin main\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如果只是添加了一些文件-不想改commit" tabindex="-1"><a class="header-anchor" href="#如果只是添加了一些文件-不想改commit" aria-hidden="true">#</a> 如果只是添加了一些文件,不想改commit</h3><p>适用场景：上一次提交遗漏了一些文件，需要补交，但不想多一次commit</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;initial commit&#39;</span>\n<span class="token function">git</span> <span class="token function">add</span> forgotten_file\n<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> --no-edit\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该操作会修改上一次提交的内容，但不会要求你编辑提交信息，仍保持上一次commit的message</p><h2 id="给文件夹添加git-remote" tabindex="-1"><a class="header-anchor" href="#给文件夹添加git-remote" aria-hidden="true">#</a> 给文件夹添加git remote</h2><p>会出现错误<code>The following untracked working tree files would be overwritten by merge</code></p><p>The problem is that you are not tracking the files locally but identical files are tracked remotely so in order to &quot;pull&quot; your system would be forced to overwrite the local files which are not version controlled.</p><p>Try running</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> *\n<span class="token function">git</span> stash\n<span class="token function">git</span> pull\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will track all files, remove all of your local changes to those files, and then get the files from the server. 或者<br><strong>推荐</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch\n <span class="token comment"># 删除所有untrack的文件</span>\n<span class="token function">git</span> clean  <span class="token parameter variable">-d</span>  <span class="token parameter variable">-fx</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/main\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用操作" tabindex="-1"><a class="header-anchor" href="#常用操作" aria-hidden="true">#</a> 常用操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev<span class="token comment">#作用是如果没有dev分支，创建dev分支并切换至该分支</span>\n<span class="token function">git</span> show HEAD^<span class="token comment">#显示当前改动的文件</span>\n<span class="token function">git</span> tag <span class="token comment">#打标签</span>\n<span class="token function">git</span> push <span class="token parameter variable">--tag</span> \n<span class="token function">git</span> tag <span class="token parameter variable">-D</span> <span class="token string">&quot;v1.0.0&quot;</span>\n<span class="token function">git</span> stash <span class="token comment">#暂存</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-add和git-stash的区别" tabindex="-1"><a class="header-anchor" href="#git-add和git-stash的区别" aria-hidden="true">#</a> git add和git stash的区别</h2><p>git add是针对新建文件<br> git stash是针对被修改文件<br> 执行add命令时，可自动将文件提交到暂存区<br> 执行stash命令时，若该文件是新建文件却没有add，则stash无效，若该文件不是新建文件，则stash可自动将文件提交到暂存区</p><p>相关命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash <span class="token comment">#保存工作现场</span>\n\n<span class="token function">git</span> stash list <span class="token comment">#查看保存到工作现场</span>\n\n<span class="token function">git</span> stash apply <span class="token comment">#恢复工作现场，现场还在list中没删</span>\n\n<span class="token function">git</span> stash pop <span class="token comment">#恢复并删除现场</span>\n\n<span class="token function">git</span> stash drop <span class="token comment">#删除现场</span>\n\n<span class="token function">git</span> stash <span class="token function">clear</span> <span class="token comment">#删除所有现场</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于git-restore" tabindex="-1"><a class="header-anchor" href="#关于git-restore" aria-hidden="true">#</a> 关于git restore</h2><p><code>git restore</code>指令使得在工作空间但是不在暂存区的文件撤销更改(内容恢复到没修改之前的状态)</p><p>而<code>git restore --staged</code>的作用是将暂存区的文件从暂存区撤出，但不会更改文件的内容</p>',57)],t={},l=(0,a(8580).Z)(t,[["render",function(e,s){return(0,n.wg)(),(0,n.iD)("div",null,i)}]])},8580:(e,s)=>{s.Z=(e,s)=>{const a=e.__vccOpts||e;for(const[e,n]of s)a[e]=n;return a}}}]);